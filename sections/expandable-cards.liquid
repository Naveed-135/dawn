<style>
  .expandable-cards {
    display: flex;
    width: 100%;
    gap: 10px; /* Adjust gap between cards */
    align-items: stretch; /* Ensure all cards have the same height */
  }

  .card {
    flex: 1;
    transition: flex 0.3s ease;
    position: relative;
    overflow: hidden;
    border: 1px solid #ccc;
    cursor: pointer;
    display: flex;
    flex-direction: column;
  }

  .card img {
    width: 100%;
    height: 200px; /* Fixed height for images */
    object-fit: cover; /* Ensure images cover the area */
  }

  .card-content {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    padding: 10px;
    background: rgba(0, 0, 0, 0.6); /* Semi-transparent black background */
    color: transparent; /* Hide text by default */
    transition: color 0.3s ease, background 0.3s ease;
  }

  .card.hovered {
    flex: 2; /* Hovered card takes 40% width */
  }

  .card.hovered .card-content {
    color: white; /* Show text in white on hover */
    background: rgba(0, 0, 0, 0.8); /* Darker background on hover */
  }

  /* Default hover state for the first card */
  .expandable-cards .card:first-child {
    flex: 2;
  }

  .expandable-cards .card:first-child .card-content {
    color: white; /* Show text in white by default for the first card */
    background: rgba(0, 0, 0, 0.8); /* Darker background for the first card */
  }
</style>

<div class="expandable-cards">
  {% for block in section.blocks %}
    <div class="card {% if forloop.first %}hovered{% endif %}" {{ block.shopify_attributes }}>
      <img src="{{ block.settings.image | img_url: '300x' }}" alt="{{ block.settings.title }}">
      <div class="card-content">
        <h3>{{ block.settings.title }}</h3>
        <p>{{ block.settings.subtitle }}</p>
      </div>
    </div>
  {% endfor %}
</div>



<script>
  document.addEventListener('DOMContentLoaded', function () {
    const cards = document.querySelectorAll('.expandable-cards .card');
    const firstCard = cards[0];

    // Function to set the first card to hover state
    function setFirstCardHover() {
      cards.forEach(card => card.classList.remove('hovered'));
      firstCard.classList.add('hovered');
    }

    // Set the first card to hover state by default
    setFirstCardHover();

    cards.forEach(card => {
      card.addEventListener('mouseenter', () => {
        // Remove hover state from all cards
        cards.forEach(c => c.classList.remove('hovered'));
        // Add hover state to the current card
        card.classList.add('hovered');
      });

      card.addEventListener('mouseleave', () => {
        // Revert to the first card being in the hover state
        setFirstCardHover();
      });
    });
  });
</script>







{% schema %}
{
  "name": "Expandable Cards",
  "settings": [],
  "blocks": [
    {
      "type": "card",
      "name": "Card",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Image"
        },
        {
          "type": "text",
          "id": "title",
          "label": "Title",
          "default": "Card Title"
        },
        {
          "type": "text",
          "id": "subtitle",
          "label": "Subtitle",
          "default": "Card Subtitle"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Expandable Cards",
      "category": "Custom"
    }
  ]
}
{% endschema %}